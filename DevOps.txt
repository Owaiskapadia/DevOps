DOCKER IMAGE 


In simple terms, a Docker image is like a snapshot or a template of a software application and all its dependencies. It contains everything needed to run the application, such as the code, libraries, and configuration settings, packaged together in a single file. Docker images are portable and can be easily shared and run on any system that has Docker installed. They simplify the deployment and management of software by ensuring consistency and reproducibility across different environments.

Containerization DEFINITION
Containerization, in simple terms, refers to the process of packaging an application and its dependencies into a self-contained unit called a container. A container provides a consistent and isolated environment for running an application, regardless of the underlying infrastructure.

Think of a container as a lightweight, standalone virtual machine that encapsulates the application and all its necessary components, such as libraries, runtime, and system tools. It runs independently of the host system, making it highly portable and eliminating any compatibility issues.

Containerization offers several benefits:

1. Portability: Containers can run on any system that supports the containerization platform, such as Docker or Kubernetes. They provide consistent behavior across different environments, from development to production.

2. Efficiency: Containers are lightweight and share the host system's operating system kernel. They start quickly and consume fewer resources compared to traditional virtual machines.

3. Isolation: Containers provide a level of isolation that keeps the application and its dependencies separate from other containers and the host system. This isolation ensures that changes made within one container do not affect others.

4. Scalability: Containers are designed to be scalable. They can be easily replicated and orchestrated across a cluster of machines to handle increased workloads or traffic.

5. Consistency: With containerization, applications and their dependencies are packaged together, ensuring that the software behaves the same way across different environments. This helps in maintaining consistency during development, testing, and deployment.

Overall, containerization simplifies application deployment, improves resource utilization, and enhances the reliability and reproducibility of software across various systems and environments.


Devops

Waterfall
Requirement> Design> Implementation>Testing > Deployemnt




Agile( u can adopt the change in this module)
Business- Developemnt (together as a one team)


Agile Automation
( Code commit> Unit Tests> code quality> Package> Intergation test)



COntinues Deployment
Continues Integration
Continues Delivery
